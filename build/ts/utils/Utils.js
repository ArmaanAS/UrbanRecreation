export function wordTree(lines) {
    const tree = {};
    for (const line of lines) {
        let node = tree;
        for (const word of line.split(" ")) {
            if (node[word] === undefined)
                node[word] = {};
            node = node[word];
        }
        node["<"] = 0;
    }
    for (const [k, node] of Object.entries(tree)) {
        if (node instanceof Object && node["<"] !== undefined && Object.keys(node).length == 1) {
            tree[k] = 0;
        }
    }
    return tree;
}
export function logTree(tree, depth = 0) {
    for (const [k, v] of Object.entries(tree)) {
        if (depth == 0) {
            console.log(k);
        }
        else {
            console.log(" ".repeat(depth * 4) + "+ " + k);
        }
        logTree(v, depth + 1);
    }
}
export function getN(arr, n = 1) {
    if (n == 0)
        return [];
    if (n == 1)
        return [arr[(arr.length * Math.random()) | 0]];
    arr = Array.from(arr);
    if (arr.length <= n)
        return arr;
    const ret = [];
    while (n--)
        ret.push(arr.splice((arr.length * Math.random()) | 0, 1)[0]);
    return ret;
}
export function splitLines(s, len, min = 0) {
    let lines;
    if (min > 0) {
        lines = new Array(min).fill(" ".repeat(len));
    }
    else {
        lines = [];
    }
    const words = s.trim().split(/(?<= )/g);
    let line = "", lineN = 0;
    for (const word of words) {
        if (line.length == 0) {
            line = word;
        }
        else if (line.length + word.length <= len) {
            line += word;
        }
        else {
            lines[lineN] = line + " ".repeat(Math.max(len - line.length, 0));
            line = word;
            lineN++;
        }
    }
    lines[lineN] = line + " ".repeat(Math.max(len - line.length, 0));
    return lines;
}
export function* alternateRange(n) {
    let i = 0;
    for (; i < n; i++) {
        yield i;
        yield n--;
    }
    if (i == n)
        yield i;
}
export function* shiftRange(n) {
    yield n;
    if (n < 3) {
        for (let i = 0; i < n; i++)
            yield i;
    }
    else {
        yield n - 3;
        for (let i = 0; i < n - 3; i++)
            yield i;
        for (let i = n - 2; i < n; i++)
            yield i;
    }
}
export function clone(o) {
    return Object.setPrototypeOf(Object.assign({}, o), o.constructor.prototype);
}
export class FlowController {
    constructor() {
        this.promise = new Promise(res => this.res = res);
    }
    resume() {
        this.res();
        this.promise = new Promise(res => this.res = res);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbHMuanMiLCJzb3VyY2VSb290IjoiL0M6L1VzZXJzL1N0dWRlbnQvRG9jdW1lbnRzL05vZGVKU1dvcmtzcGFjZS9VcmJhblJlY3JlYXRpb24vc3JjLyIsInNvdXJjZXMiOlsidHMvdXRpbHMvVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFlO0lBQ3RDLE1BQU0sSUFBSSxHQUFTLEVBQUUsQ0FBQztJQUV0QixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN4QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVM7Z0JBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFbEIsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQVMsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDZjtJQUVELEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzVDLElBQUksSUFBSSxZQUFZLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUN0RixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2I7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsSUFBbUIsRUFBRSxLQUFLLEdBQUcsQ0FBQztJQUNwRCxLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxD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