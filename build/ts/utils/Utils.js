export function wordTree(lines) {
    let tree = {};
    for (let line of lines) {
        let node = tree;
        for (let word of line.split(" ")) {
            if (node[word] === undefined)
                node[word] = {};
            node = node[word];
        }
        node["<"] = 0;
    }
    for (let [k, node] of Object.entries(tree)) {
        if (node instanceof Object && node["<"] !== undefined && Object.keys(node).length == 1) {
            tree[k] = 0;
        }
    }
    return tree;
}
export function logTree(tree, depth = 0) {
    Object.entries(tree).forEach(([k, v], i) => {
        if (depth == 0) {
            console.log(k);
        }
        else {
            console.log(" ".repeat(depth * 4) + "+ " + k);
        }
        logTree(v, depth + 1);
    });
}
export function getN(arr, n = 1) {
    if (n == 0)
        return [];
    if (n == 1)
        return [arr[(arr.length * Math.random()) | 0]];
    arr = Array.from(arr);
    if (arr.length <= n)
        return arr;
    let ret = [];
    while (n--) {
        ret.push(arr.splice((arr.length * Math.random()) | 0, 1)[0]);
    }
    return ret;
}
export function splitLines(s, len, min = 0) {
    let lines;
    if (min > 0) {
        lines = new Array(min).fill(" ".repeat(len));
    }
    else {
        lines = [];
    }
    let words = s.trim().split(/(?<= )/g);
    let line = "", lineN = 0;
    for (let word of words) {
        if (line.length == 0) {
            line = word;
        }
        else if (line.length + word.length <= len) {
            line += word;
        }
        else {
            lines[lineN] = line + " ".repeat(Math.max(len - line.length, 0));
            line = word;
            lineN++;
        }
    }
    lines[lineN] = line + " ".repeat(Math.max(len - line.length, 0));
    return lines;
}
export function* alternateRange(n) {
    let i = 0;
    for (; i < n; i++) {
        yield i;
        yield n--;
    }
    if (i == n)
        yield i;
}
export function* shiftRange(n) {
    yield n;
    if (n >= 3)
        yield n - 3;
    for (let i = 0; i < n - 3; i++)
        yield i;
    for (let i = n - 2; i < n; i++)
        yield i;
}
export function clone(o) {
    return Object.setPrototypeOf(Object.assign({}, o), o.constructor.prototype);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbHMuanMiLCJzb3VyY2VSb290IjoiL0M6L1VzZXJzL1N0dWRlbnQvRG9jdW1lbnRzL05vZGVKU1dvcmtzcGFjZS9VcmJhblJlY3JlYXRpb24vc3JjLyIsInNvdXJjZXMiOlsidHMvdXRpbHMvVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFlO0lBQ3RDLElBQUksSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUV0QixLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN0QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2hDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVM7Z0JBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFbEIsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQVMsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDZjtJQUVELEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzFDLElBQUksSUFBSSxZQUFZLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUN0RixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2I7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsSUFBbUIsRUFBRSxLQUFLLEdBQUcsQ0FBQztJQUNwRCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxD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