import Hand, { HandGenerator } from "./Hand";
import "colors";
import readline from "readline";
import { AbilityString } from './types/CardTypes';
import { clone } from "./utils/Utils";
import Player from "./Player";
import GameRenderer from "./utils/GameRenderer";
import Events from "./Events";
import PlayerRound from "./PlayerRound";
import CardBattle from "./CardBattle";
let rl;
export var Winner;
(function (Winner) {
    Winner[Winner["PLAYING"] = 0] = "PLAYING";
    Winner[Winner["PLAYER_1"] = 1] = "PLAYER_1";
    Winner[Winner["PLAYER_2"] = 2] = "PLAYER_2";
    Winner[Winner["TIE"] = 3] = "TIE";
})(Winner || (Winner = {}));
export default class Game {
    constructor(p1, p2, h1, h2, inputs, logs = true, repeat, first = true) {
        this.winner = Winner.PLAYING;
        this.firstHasSelected = false;
        this.i1 = undefined;
        this.i2 = undefined;
        this.round = 1;
        this.day = true;
        this.events1 = new Events();
        this.events2 = new Events();
        this.ca1 = false;
        this.ca2 = false;
        this.inputs = inputs;
        this.logs = logs;
        this.p1 = p1;
        this.p2 = p2;
        this.h1 = h1;
        this.h2 = h2;
        this.first = this.round % 2 == +first;
        const l1 = this.h1.getLeader();
        if (l1 && l1.abilityString == 'Counter-attack')
            this.ca1 = true;
        const l2 = this.h2.getLeader();
        if (l2 && l2.abilityString == 'Counter-attack')
            this.ca2 = true;
        if (this.ca1 == this.ca2) {
            this.first = true;
        }
        else if (this.ca1) {
            this.first = false;
        }
        else if (this.ca2) {
            this.first = true;
        }
        this.r1 = new PlayerRound(1, this.day, first, p1, h1, p2, h2, this.events1);
        this.r2 = new PlayerRound(1, this.day, !first, p2, h2, p1, h1, this.events2);
        for (const hand of [h1, h2]) {
            for (const card of hand) {
                if (card.clan == "Leader") {
                    if (hand.getClanCards(card) > 1)
                        card.ability.string = AbilityString.NO_ABILITY;
                }
                else {
                    if (hand.getClanCards(card) == 1)
                        card.bonus.string = AbilityString.NO_ABILITY;
                }
            }
        }
        GameRenderer.draw(this);
        if (inputs)
            this.input(repeat);
    }
    clone(inputs, logs) {
        const p1 = clone(this.p1);
        const p2 = clone(this.p2);
        const h1 = this.h1.clone();
        const h2 = this.h2.clone();
        const events1 = this.events1.clone();
        const events2 = this.events2.clone();
        return Object.setPrototypeOf({
            inputs: inputs !== null && inputs !== void 0 ? inputs : this.inputs,
            logs: logs !== null && logs !== void 0 ? logs : this.logs,
            winner: this.winner,
            p1, p2, h1, h2,
            firstHasSelected: this.firstHasSelected,
            i1: this.i1,
            i2: this.i2,
            round: this.round,
            day: this.day,
            first: this.first,
            events1,
            events2,
            ca1: this.ca1,
            ca2: this.ca2,
            r1: this.r1.clone(p1, h1, p2, h2, events1),
            r2: this.r2.clone(p2, h2, p1, h1, events2)
        }, Game.prototype);
    }
    static from(o, inputs, logs) {
        Object.setPrototypeOf(o, Game.prototype);
        Object.setPrototypeOf(o.p1, Player.prototype);
        Object.setPrototypeOf(o.p2, Player.prototype);
        Hand.from(o.h1);
        Hand.from(o.h2);
        Events.from(o.events1);
        Events.from(o.events2);
        Object.setPrototypeOf(o.r1, PlayerRound.prototype);
        Object.setPrototypeOf(o.r2, PlayerRound.prototype);
        if (inputs !== undefined)
            o.inputs = inputs;
        if (logs !== undefined)
            o.logs = logs;
        return o;
    }
    select(index, pillz, fury = false) {
        if (typeof index != 'number' || typeof pillz != 'number')
            throw new Error(`Game.select - index or pillz is not a number 
        index: ${index}, pillz: ${pillz}`);
        if (this.firstHasSelected != this.first) {
            if (this.h1[index].played)
                return false;
            this.i1 = [index, pillz, fury];
            this.h1[index].played = true;
        }
        else {
            if (this.h2[index].played)
                return false;
            this.i2 = [index, pillz, fury];
            this.h2[index].played = true;
        }
        if (this.firstHasSelected) {
            this.battle();
            this.i1 = undefined;
            this.i2 = undefined;
        }
        this.firstHasSelected = !this.firstHasSelected;
        GameRenderer.draw(this);
        return true;
    }
    battle() {
        if (this.i1 !== undefined && this.i2 !== undefined) {
            const card1 = this.h1[this.i1[0]];
            const card2 = this.h2[this.i2[0]];
            const pillz1 = this.i1[1];
            const pillz2 = this.i2[1];
            const fury1 = this.i1[2];
            const fury2 = this.i2[2];
            new CardBattle(this, this.p1, card1, pillz1, fury1, this.p2, card2, pillz2, fury2, this.events1, this.events2).play();
            this.nextRound();
            if (this.p1.life <= 0 && this.p2.life <= 0)
                return 'Tie';
            else if (this.p1.life <= 0)
                this.winner = Winner.PLAYER_2;
            else if (this.p2.life <= 0)
                this.winner = Winner.PLAYER_1;
            else if (this.round >= 5) {
                if (this.p1.life > this.p2.life)
                    this.winner = Winner.PLAYER_1;
                else if (this.p1.life < this.p2.life)
                    this.winner = Winner.PLAYER_2;
                else
                    this.winner = Winner.TIE;
            }
        }
        return;
    }
    input(repeat = true) {
        if (!rl) {
            rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout,
            });
        }
        const msg = `
         _____      _           _                       _ 
        /  ___|    | |         | |                     | |
        \\ \`--.  ___| | ___  ___| |_    ___ __ _ _ __ __| |
         \`--. \\/ _ \\ |/ _ \\/ __| __|  / __/ _\` | '__/ _\` |
        /\\__/ /  __/ |  __/ (__| |_  | (_| (_| | | | (_| |
        \\____/ \\___|_|\\___|\\___|\\__|  \\___\\__,_|_|  \\__,_| o o o
                                                                                                                                                
    \n`;
        return new Promise((resolve) => {
            rl.question(msg.green, async (answer) => {
                var _a;
                console.log(`Selected ${answer}`);
                const s = answer.trim().split(' ');
                const index = +s[0];
                const pillz = +((_a = s[1]) !== null && _a !== void 0 ? _a : 0);
                const fury = s[2] == 'true';
                if (index < 0 || index > 3 || pillz < 0) {
                    resolve(await this.input(repeat));
                    return;
                }
                if (!this.select(index, pillz, fury)) {
                    resolve(await this.input(repeat));
                }
                else {
                    if (this.hasWinner(repeat)) {
                        console.log("\n\nClosing readline...");
                        rl.close();
                        resolve(s);
                    }
                    else {
                        if (repeat) {
                            resolve(await this.input(true));
                        }
                        else {
                            resolve(s);
                        }
                    }
                }
            });
        });
    }
    hasWinner(log = false) {
        if (this.round > 4 || this.p1.life <= 0 || this.p2.life <= 0) {
            if (log) {
                GameRenderer.draw(this);
                console.log("\n Game over!\n".white.bgRed);
                if (this.p1.life > this.p2.life)
                    console.log(` ${` ${this.p1.name} `.white.bgCyan} won the match!\n`);
                else if (this.p1.life < this.p2.life)
                    console.log(` ${` ${this.p2.name} `.white.bgCyan} won the match!\n`);
                else
                    console.log("Game is a draw!\n".green);
            }
            return true;
        }
        return false;
    }
    getTurn() {
        return this.firstHasSelected !== this.first ? 'Player' : 'Urban Rival';
    }
    nextRound() {
        if (this.ca1 == this.ca2)
            this.first = !this.first;
        else if (this.ca1)
            this.first = false;
        else if (this.ca2)
            this.first = true;
        this.round++;
        this.r1.next(this.first);
        this.r2.next(!this.first);
    }
}
export class GameGenerator {
    static create(inputs = true, logs, repeat) {
        const p1 = new Player(12, 12, 0);
        const p2 = new Player(12, 12, 1);
        const h1 = HandGenerator.generate('Roderick', 'Frank', 'Katsuhkay', 'Oyoh');
        const h2 = HandGenerator.generate('Behemoth Cr', 'Vholt', 'Eyrik', 'Kate');
        return new Game(p1, p2, h1, h2, inputs, logs, repeat);
    }
    static createUnique(h1, h2, life, pillz, name1, name2, first) {
        const p1 = new Player(life, pillz, name1 == 'Player' ? 0 : 1);
        const p2 = new Player(life, pillz, name2 == 'Player' ? 0 : 1);
        return new Game(p1, p2, HandGenerator.generateRaw(h1), HandGenerator.generateRaw(h2), false, false, false, first);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtZS5qcyIsInNvdXJjZVJvb3QiOiIvQzovVXNlcnMvU3R1ZGVudC9Eb2N1bWVudHMvTm9kZUpTV29ya3NwYWNlL1VyYmFuUmVjcmVhdGlvbi9zcmMvIiwic291cmNlcyI6WyJ0cy9HYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxFQUFFLEVBQUUsYUFBYSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzdDLE9BQU8sUUFBUSxDQUFDO0FBQ2hCLE9BQU8sUUFBUSxNQUFNLFVBQVUsQ0FBQztBQUNoQyxPQUFPLEVBQUUsYUFBYSxFQUFvQixNQUFNLG1CQUFtQixDQUFBO0FBQ25FLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sWUFBWSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLFdBQVcsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxVQUFVLE1BQU0sY0FBYyxDQUFDO0FBRXRDLElBQUksRUFBc0IsQ0FBQztBQUUzQixNQUFNLENBQU4sSUFBWSxNQUtYO0FBTEQsV0FBWSxNQUFNO0lBQ2hCLHlDQUFXLENBQUE7SUFDWCwyQ0FBWSxDQUFBO0lBQ1osMkNBQVksQ0FBQTtJQUNaLGlDQUFPLENBQUE7QUFDVCxDQUFDLEVBTFcsTUFBTSxLQUFOLE1BQU0sUUFLakI7QUFLRCxNQUFNLENBQUMsT0FBTyxPQUFPLElBQUk7SUF1QnZCLFlBQ0UsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFRLEVBQUUsRUFBUSxFQUMxQyxNQUFlLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxNQUEyQixFQUN6RCxLQUFLLEdBQUcsSUFBSTtRQXJCZCxXQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUd4QixxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFFekIsT0FBRSxHQUFlLFNBQVMsQ0FBQztRQUMz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