import fs from "fs";
import { getN } from "./utils/Utils";
import { Clans } from "./types/Types";
import "colors";
import { isMainThread } from 'worker_threads';
let json, cardIds = {}, cardNames = {};
const cardYears = {}, cardClans = {};
const baseCards = {};
class BaseData {
}
class BaseAttr extends BaseData {
}
class BaseStat extends BaseAttr {
}
class PowerStat extends BaseStat {
    get base() {
        return this.a & 0xff;
    }
    set base(n) {
        this.a = (this.a & ~0xff) | (n & 0xff);
    }
    get final() {
        return this.a >> 8 & 0xff;
    }
    set final(n) {
        this.a = (this.a & ~0xff00) | ((n & 0xff) << 8);
    }
    get cancel() {
        return !!(this.b >> 16 & 1);
    }
    set cancel(n) {
        this.b = (this.b & ~0x10000) | (+n << 16);
    }
    get prot() {
        return !!(this.b >> 17 & 1);
    }
    set prot(n) {
        this.b = (this.b & ~0x20000) | (+n << 17);
    }
    get blocked() {
        return (this.b >> 16 & 0b11) !== 0b01;
    }
}
class DamageStat extends BaseStat {
    get base() {
        return this.a >> 16 & 0xff;
    }
    set base(n) {
        this.a = (this.a & ~0xff0000) | ((n & 0xff) << 16);
    }
    get final() {
        return this.a >> 24 & 0xff;
    }
    set final(n) {
        this.a = (this.a & ~0xff000000) | ((n & 0xff) << 24);
    }
    get cancel() {
        return !!(this.b >> 18 & 1);
    }
    set cancel(n) {
        this.b = (this.b & ~0x40000) | (+n << 18);
    }
    get prot() {
        return !!(this.b >> 19 & 1);
    }
    set prot(n) {
        this.b = (this.b & ~0x80000) | (+n << 19);
    }
    get blocked() {
        return (this.b >> 18 & 0b11) !== 0b01;
    }
}
class AttackStat extends BaseStat {
    get base() {
        return this.b & 0xff;
    }
    set base(n) {
        this.b = (this.b & ~0xff) | (n & 0xff);
    }
    get final() {
        return this.b >> 8 & 0xff;
    }
    set final(n) {
        this.b = (this.b & ~0xff00) | ((n & 0xff) << 8);
    }
    get cancel() {
        return !!(this.b >> 20 & 1);
    }
    set cancel(n) {
        this.b = (this.b & ~0x100000) | (+n << 20);
    }
    get prot() {
        return !!(this.b >> 21 & 1);
    }
    set prot(n) {
        this.b = (this.b & ~0x200000) | (+n << 21);
    }
    get blocked() {
        return (this.b >> 20 & 0b11) !== 0b01;
    }
}
class PillzStat extends BaseAttr {
    get cancel() {
        return !!(this.b >> 22 & 1);
    }
    set cancel(n) {
        this.b = (this.b & ~0x400000) | (+n << 22);
    }
    get prot() {
        return !!(this.b >> 23 & 1);
    }
    set prot(n) {
        this.b = (this.b & ~0x800000) | (+n << 23);
    }
    get blocked() {
        return (this.b >> 22 & 0b11) !== 0b01;
    }
}
class LifeStat extends BaseAttr {
    get cancel() {
        return !!(this.b >> 24 & 1);
    }
    set cancel(n) {
        this.b = (this.b & ~0x1000000) | (+n << 24);
    }
    get prot() {
        return !!(this.b >> 25 & 1);
    }
    set prot(n) {
        this.b = (this.b & ~0x2000000) | (+n << 25);
    }
    get blocked() {
        return (this.b >> 24 & 0b11) !== 0b01;
    }
}
export default class Card {
    constructor(json) {
        this.key = -1;
        this._ability = undefined;
        this._bonus = undefined;
        this.key = (json.id & 0xffff) | (json.level << 16);
        this.data = Object.assign({}, this.base.data);
    }
    clone() {
        return Object.setPrototypeOf({
            key: this.key,
            _ability: this._ability && Object.assign({}, this._ability),
            _bonus: this._bonus && Object.assign({}, this._bonus),
            data: Object.assign({}, this.data)
        }, Card.prototype);
    }
    static from(o) {
        return Object.setPrototypeOf(o, Card.prototype);
    }
    get base() {
        return baseCards[this.key];
    }
    get year() {
        return new Date(this.base.release_date).getFullYear().toString();
    }
    get clan() {
        return this.base.clan;
    }
    get stars() {
        return this.base.stars;
    }
    get maxStars() {
        return this.base.maxStars;
    }
    get name() {
        return this.base.name;
    }
    get id() {
        return this.base.id;
    }
    get rarity() {
        return this.base.rarity;
    }
    get ability() {
        var _a;
        return (_a = this._ability) !== null && _a !== void 0 ? _a : this.base.ability;
    }
    get bonus() {
        var _a;
        return (_a = this._bonus) !== null && _a !== void 0 ? _a : this.base.bonus;
    }
    get power() {
        return Object.setPrototypeOf(this.data, PowerStat.prototype);
    }
    get damage() {
        return Object.setPrototypeOf(this.data, DamageStat.prototype);
    }
    get attack() {
        return Object.setPrototypeOf(this.data, AttackStat.prototype);
    }
    get life() {
        return Object.setPrototypeOf(this.data, LifeStat.prototype);
    }
    get pillz() {
        return Object.setPrototypeOf(this.data, PillzStat.prototype);
    }
    get ability_() {
        var _a;
        return (_a = this._ability) !== null && _a !== void 0 ? _a : (this._ability = Object.assign({}, this.base.ability));
    }
    get bonus_() {
        var _a;
        return (_a = this._bonus) !== null && _a !== void 0 ? _a : (this._bonus = Object.assign({}, this.base.bonus));
    }
    get power_() {
        return Object.setPrototypeOf(this.data, PowerStat.prototype);
    }
    get damage_() {
        return Object.setPrototypeOf(this.data, DamageStat.prototype);
    }
    get attack_() {
        return Object.setPrototypeOf(this.data, AttackStat.prototype);
    }
    get life_() {
        return Object.setPrototypeOf(this.data, LifeStat.prototype);
    }
    get pillz_() {
        return Object.setPrototypeOf(this.data, PillzStat.prototype);
    }
    get index() {
        return this.data.b >> 26 & 0b111;
    }
    set index(n) {
        this.data.b = (this.data.b & ~(0b111 << 26)) | ((n & 0b111) << 26);
    }
    get won() {
        const a = this.data.b >> 29 & 0b11;
        return a === 0 ? undefined : a === 3;
    }
    set won(n) {
        if (n === undefined)
            this.data.b &= ~(0b11 << 29);
        else
            this.data.b = (this.data.b & ~(0b11 << 29)) | (((+n << 1) | 0b1) << 29);
    }
    get played() {
        return !!(this.data.b >> 31 & 1);
    }
    set played(n) {
        this.data.b = (this.data.b & ~(1 << 31)) | (+n << 31);
    }
}
export class CardGenerator {
    static get(card) {
        let data;
        if (typeof card == 'number')
            data = cardIds[card];
        else
            data = cardNames[card];
        return data && new Card(data);
    }
    static getRandomHandYear(year = 2006) {
        const card = getN(cardYears[year])[0];
        const cards = cardYears[year].filter((j) => j.clan_name == card.clan_name);
        return getN(cards, 4).map((c) => new Card(c));
    }
    static getRandomHandClan(clan) {
        let cards;
        if (clan !== undefined)
            cards = cardClans[clan];
        else
            cards = cardClans[getN(Clans)[0]];
        return getN(cards, 4).map((c) => new Card(c));
    }
    static getRandomHand(cards) {
        const cardsArr = cards.map(c => {
            if (typeof c == "string")
                return new Card(cardNames[c.toLowerCase()]);
            else
                return new Card(cardIds[c]);
        });
        cardsArr.push(...getN(Object.values(cardIds), 4 - cardsArr.length)
            .map(c => new Card(c)));
        return cardsArr;
    }
}
if (isMainThread || !false) {
    const data = fs.readFileSync("../../data/data.json").toString();
    json = JSON.parse(data);
    console.log(json.length.toString().green + " cards loaded!".white);
    cardIds = Object.fromEntries(json.map(i => [i.id, i]));
    cardNames = Object.fromEntries(json.map(i => [i.name.toLowerCase(), i]));
    for (const j of json) {
        const year = new Date(j.release_date * 1000).getFullYear();
        if (!cardYears[year]) {
            cardYears[year] = [];
        }
        cardYears[year].push(j);
        const clan = j.clan_name;
        if (!cardClans[clan]) {
            cardClans[clan] = [];
        }
        cardClans[clan].push(j);
        const o = { a: 0, b: 0 };
        const power = Object.setPrototypeOf(o, PowerStat.prototype);
        power.base = j.power;
        power.final = j.power;
        const damage = Object.setPrototypeOf(o, DamageStat.prototype);
        damage.base = j.damage;
        damage.final = j.damage;
        const key = (j.id & 0xffff) | (j.level << 16);
        baseCards[key] = {
            name: j.name,
            id: j.id,
            stars: j.level,
            maxStars: j.level_max,
            release_date: j.release_date * 1000,
            clan: j.clan_name,
            rarity: j.rarity,
            ability: { string: j.ability, prot: false, cancel: false },
            bonus: { string: j.bonus, prot: false, cancel: false },
            data: o,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,