import fs from "fs";
import colors from "colors";
import { clone, getN, splitLines } from "./utils/Utils";
import Canvas from "./utils/Canvas";
import { Clans } from "./types/Types";
import { isMainThread } from 'worker_threads';
let cbf = () => { };
let json, cardIds = {}, cardNames = {}, cardYears = {}, cardClans = {}, abilities;
export default class Card {
    constructor(json) {
        this.index = -1;
        this.won = undefined;
        this.played = false;
        this.name = json.name;
        this.id = json.id;
        this.stars = json.level;
        this.maxStars = json.level_max;
        this.release_date = json.release_date * 1000;
        this.clan = json.clan_name;
        this.rarity = json.rarity;
        this.power = {
            base: json.power, final: json.power, prot: false, cancel: false
        };
        this.damage = {
            base: json.damage, final: json.damage, prot: false, cancel: false
        };
        this.ability = { string: json.ability, prot: false, cancel: false };
        this.bonus = { string: json.bonus, prot: false, cancel: false };
        this.attack = { base: 0, final: 0, prot: false, cancel: false };
        this.life = { prot: false, cancel: false };
        this.pillz = { prot: false, cancel: false };
    }
    clone() {
        return Object.setPrototypeOf({
            index: this.index,
            won: this.won,
            played: this.played,
            name: this.name,
            id: this.id,
            stars: this.stars,
            maxStars: this.maxStars,
            release_date: this.release_date,
            clan: this.clan,
            rarity: this.rarity,
            damage: clone(this.damage),
            ability: clone(this.ability),
            bonus: clone(this.bonus),
            attack: clone(this.attack),
            life: clone(this.life),
            pillz: clone(this.pillz),
            power: clone(this.power),
        }, Card.prototype);
    }
    static from(o) {
        return Object.setPrototypeOf(o, Card.prototype);
    }
    getStars() {
        return this.stars;
    }
    getName() {
        return this.name;
    }
    getAbility() {
        return this.ability.string;
    }
    getBonus() {
        return this.bonus.string;
    }
    getClan() {
        return this.clan;
    }
    get year() {
        return new Date(this.release_date).getFullYear().toString();
    }
    get styledName() {
        switch (this.rarity) {
            case "c":
                return ` ${this.name} `.bgRed.white;
            case "u":
                return ` ${this.name} `.bgWhite.dim.white;
            case "r":
                return ` ${this.name} `.bgYellow.black;
            case "cr":
                return colors.bold(` ${this.name} `.bgYellow.white);
            case "l":
                return colors.bold(` ${this.name} `.white.bgMagenta);
            case "m":
                return colors.bold(` ${this.name} `.bgBlue.white);
        }
    }
    get styledClan() {
        let styler = Card.styles[this.clan];
        if (styler) {
            return styler(this.clan);
        }
        else {
            return this.clan.rainbow.strikethrough;
        }
    }
    image() {
        let width = 24;
        let c = new Canvas(width, 15);
        if (this.won == true) {
            c.col = "green";
        }
        else if (this.won == false) {
            c.col = "red";
        }
        else if (this.played) {
            c.col = "yellow";
        }
        let long = this.name.length >= 14;
        let pl = Math.floor((width - 2 - this.name.length) / 2) - 1 + (long ? -1 : 0);
        let pr = Math.ceil((width - 2 - this.name.length) / 2) - 4 + (long ? +1 : 0);
        let name = this.name.underline;
        name =
            " ".repeat(pl) +
                this.styledName +
                " ".repeat(Math.max(0, pr)) +
                this.year.grey;
        c.write(0, name);
        let stars = " $".bold.toString().repeat(this.stars) +
            " â˜†".repeat(this.maxStars - this.stars) +
            " ";
        c.write(2, " ".repeat(width - 4 - this.maxStars * 2) +
            stars.yellow.bgMagenta.bold);
        let power;
        if (this.power.final != this.power.base) {
            power = `${this.power.final.toString().blue.italic} ${this.power.base.toString().grey.strikethrough}`;
        }
        else {
            power = `${this.power.base.toString().blue}`;
        }
        let damage;
        if (this.damage.final != this.damage.base) {
            damage = `${this.damage.final.toString().red.italic} ${this.damage.base.toString().grey.strikethrough}`;
        }
        else {
            damage = `${this.damage.base.toString().red}`;
        }
        c.write(3, " " + " P ".white.bgBlue + ` ${power} `);
        c.write(4, " " + " D ".white.bgRed.bold + ` ${damage} `);
        let a = splitLines(this.ability.string, width - 3, 3);
        let b = splitLines(this.bonus.string, width - 3, 2);
        const acol = a[0].startsWith("No") ? "grey" : "blue";
        const bcol = b[0].startsWith("No") ? "grey" : "red";
        c.write(5, " ".repeat(width - 1 - " ability ".length) +
            " Ability ".white.bgCyan.underline.bold);
        c.write(6, " " + (" " + a[0])[acol].bgWhite);
        c.write(7, " " + (" " + a[1])[acol].bgWhite);
        c.write(8, " " + (" " + a[2])[acol].bgWhite);
        c.write(10, " ".repeat(width - 1 - " bonus ".length) +
            " Bonus ".white.bgRed.underline.bold);
        c.write(11, " " + (" " + b[0])[bcol].bgWhite);
        c.write(12, " " + (" " + b[1])[bcol].bgWhite);
        c.write(14, ` ${"Clan".grey.bold} | ` + this.styledClan.bold);
        return c;
    }
    static get(card) {
        let data;
        if (typeof card == 'number')
            data = cardIds[card];
        else
            data = cardNames[card];
        if (data == undefined)
            return undefined;
        else
            return new Card(data);
    }
    static getRandomHandYear(year = 2006) {
        let card = getN(cardYears[year])[0];
        let cards = cardYears[year].filter((j) => j.clan_name == card.clan_name);
        return getN(cards, 4).map((c) => new Card(c));
    }
    static getRandomHandClan(clan) {
        let cards;
        if (clan !== undefined) {
            cards = cardClans[clan];
        }
        else {
            cards = cardClans[getN(Clans)[0]];
        }
        return getN(cards, 4).map((c) => new Card(c));
    }
    static getRandomHand(cards) {
        let cardsArr = cards.map(c => {
            if (typeof c == "string")
                return new Card(cardNames[c.toLowerCase()]);
            else
                return new Card(cardIds[c]);
        });
        cardsArr.push(...getN(Object.values(cardIds), 4 - cardsArr.length).map((c) => new Card(c)));
        return cardsArr;
    }
}
Card.styles = {
    "All Stars": (s) => s.blue,
    Bangers: (s) => s.yellow.dim,
    Berzerk: (s) => s.red,
    Dominion: (s) => s.magenta.dim,
    "Fang Pi Clang": (s) => s.red,
    Freaks: (s) => s.green,
    Frozn: (s) => s.cyan,
    GHEIST: (s) => s.red.dim,
    GhosTown: (s) => s.blue,
    Hive: (s) => s.yellow,
    Huracan: (s) => s.red,
    Jungo: (s) => s.yellow.dim,
    Junkz: (s) => s.yellow,
    Komboka: (s) => s.cyan.dim,
    "La Junta": (s) => s.yellow,
    Leader: (s) => s.red,
    Montana: (s) => s.magenta.dim,
    Nightmare: (s) => s.black.dim,
    Paradox: (s) => s.magenta.dim,
    Piranas: (s) => s.yellow,
    Pussycats: (s) => s.magenta,
    Raptors: (s) => s.yellow.dim,
    Rescue: (s) => s.yellow,
    Riots: (s) => s.yellow.dim,
    Roots: (s) => s.green.dim,
    Sakrohm: (s) => s.green,
    Sentinel: (s) => s.yellow.dim,
    Skeelz: (s) => s.magenta.dim,
    "Ulu Watu": (s) => s.green,
    Uppers: (s) => s.green,
    Vortex: (s) => s.grey,
};
if (isMainThread || true) {
    let data = fs.readFileSync("../../data/data.json").toString();
    json = JSON.parse(data);
    console.log(json.length.toString().green + " cards loaded!".white);
    cardIds = Object.fromEntries(json.map(i => [i.id, i]));
    cardNames = Object.fromEntries(json.map(i => [i.name.toLowerCase(), i]));
    json.forEach(i => {
        let year = new Date(i.release_date * 1000).getFullYear();
        if (!cardYears[year]) {
            cardYears[year] = [];
        }
        cardYears[year].push(i);
        let clan = i.clan_name;
        if (!cardClans[clan]) {
            cardClans[clan] = [];
        }
        cardClans[clan].push(i);
    });
}
//# sourceMappingURL=data:application/json;base64,