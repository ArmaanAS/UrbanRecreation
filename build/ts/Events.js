import Ability from "./Ability";
export var EventTime;
(function (EventTime) {
    EventTime[EventTime["START"] = 0] = "START";
    EventTime[EventTime["PRE1"] = 1] = "PRE1";
    EventTime[EventTime["PRE2"] = 2] = "PRE2";
    EventTime[EventTime["PRE3"] = 3] = "PRE3";
    EventTime[EventTime["PRE4"] = 4] = "PRE4";
    EventTime[EventTime["POST1"] = 5] = "POST1";
    EventTime[EventTime["POST2"] = 6] = "POST2";
    EventTime[EventTime["POST3"] = 7] = "POST3";
    EventTime[EventTime["POST4"] = 8] = "POST4";
    EventTime[EventTime["END"] = 9] = "END";
})(EventTime || (EventTime = {}));
export default class Events {
    constructor() {
        this.events = new Array(10).fill(null).map(() => []);
        this.repeat = new Array(10).fill(null).map(() => []);
    }
    clone() {
        return Object.setPrototypeOf({
            events: this.events.map(arr => arr.map(a => a.clone())),
            repeat: this.repeat.map(arr => arr.map(a => a.clone()))
        }, Events.prototype);
    }
    static from(o) {
        Object.setPrototypeOf(o, Events.prototype);
        o.events = o.events.map(arr => arr.map(Ability.from));
        o.repeat = o.repeat.map(arr => arr.map(Ability.from));
        return o;
    }
    add(event, ability) {
        this.events[event].push(ability);
    }
    addGlobal(event, ability) {
        this.repeat[event].push(ability);
    }
    execute(event, data) {
        let ability;
        while ((ability = this.events[event].pop()) !== undefined)
            ability.apply(data);
        for (const ability of this.repeat[event])
            ability.apply(data);
    }
    executeStart(data) {
        this.execute(EventTime.START, data);
    }
    executePre(data) {
        for (const e of [1, 2, 3, 4])
            this.execute(e, data);
    }
    executePost(data) {
        for (const e of [5, 6, 7, 8])
            this.execute(e, data);
    }
    executeEnd(data) {
        this.execute(EventTime.END, data);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRzLmpzIiwic291cmNlUm9vdCI6Ii9DOi9Vc2Vycy9TdHVkZW50L0RvY3VtZW50cy9Ob2RlSlNXb3Jrc3BhY2UvVXJiYW5SZWNyZWF0aW9uL3NyYy8iLCJzb3VyY2VzIjpbInRzL0V2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUE7QUFHL0IsTUFBTSxDQUFOLElBQVksU0FjWDtBQWRELFdBQVksU0FBUztJQUNuQiwyQ0FBUyxDQUFBO0lBRVQseUNBQVEsQ0FBQTtJQUNSLHlDQUFRLENBQUE7SUFDUix5Q0FBUSxDQUFBO0lBQ1IseUNBQVEsQ0FBQTtJQUVSLDJDQUFTLENBQUE7SUFDVCwyQ0FBUyxDQUFBO0lBQ1QsMkNBQVMsQ0FBQTtJQUNULDJDQUFTLENBQUE7SUFFVCx1Q0FBTyxDQUFBO0FBQ1QsQ0FBQyxFQWRXLFNBQVMsS0FBVCxTQUFTLFFBY3BCO0FBR0QsTUFBTSxDQUFDLE9BQU8sT0FBTyxNQUFNO0lBR3pCO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFZLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBWSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQztZQUMzQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDdkQs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