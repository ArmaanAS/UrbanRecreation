import { EventTime } from "../Events";
import Modifier from "./Modifier";
const Per = {
    POWER: { opp: false, type: 1, name: "POWER" },
    DAMAGE: { opp: false, type: 2, name: "DAMAGE" },
    LIFE: { opp: false, type: 3, name: "LIFE" },
    PILLZ: { opp: false, type: 4, name: "PILLZ" },
    SUPPORT: { opp: false, type: 5, name: "SUPPORT" },
    BRAWL: { opp: false, type: 6, name: "BRAWL" },
    GROWTH: { opp: false, type: 7, name: "GROWTH" },
    DEGROWTH: { opp: false, type: 8, name: "DEGROWTH" },
    EQUALIZER: { opp: false, type: 9, name: "EQUALIZER" },
    SYMMETRY: { opp: false, type: 10, name: "SYMMETRY" },
    ASYMMETRY: { opp: false, type: 11, name: "ASYMMETRY" },
    OPP_POWER: { opp: true, type: 1, name: "OPP_POWER" },
    OPP_DAMAGE: { opp: true, type: 2, name: "OPP_DAMAGE" },
    OPP_LIFE: { opp: true, type: 3, name: "OPP_LIFE" },
    OPP_PILLZ: { opp: true, type: 4, name: "OPP_PILLZ" },
};
function perFromObject(o) {
    return o && Per[o.name];
}
const Time = {
    POWER: { eventTime: EventTime.PRE4, name: "POWER", win: false },
    DAMAGE: { eventTime: EventTime.PRE4, name: "DAMAGE", win: false },
    ATTACK: { eventTime: EventTime.POST1, name: "ATTACK", win: false },
    LIFE: { eventTime: EventTime.END, name: "LIFE", win: false },
    PILLZ: { eventTime: EventTime.END, name: "PILLZ", win: false }
};
function timeFromObject(o) {
    return o && Time[o.name];
}
const Type = Time;
export default class BasicModifier extends Modifier {
    constructor() {
        super(...arguments);
        this.change = 0;
        this.per = undefined;
        this.type = undefined;
        this.opp = false;
        this.min = -Infinity;
        this.max = Infinity;
    }
    static from(o) {
        Object.setPrototypeOf(o, BasicModifier.prototype);
        o.per = perFromObject(o.per);
        o.type = timeFromObject(o.type);
        process.stderr.write(o.per + "  " + o.per.constructor.name);
        process.stderr.write(o.type + "  " + o.type.constructor.name);
        return o;
    }
    setMin(min) {
        this.min = min;
        console.log("Set min: " + min);
        return this;
    }
    setMax(max) {
        this.max = max;
        console.log("Set max: " + max);
        return this;
    }
    setPer(per, opp = false) {
        var _a;
        if (typeof per == "string") {
            if (opp) {
                this.per = Per[`OPP_${per.toUpperCase()}`];
            }
            else {
                this.per = Per[per.toUpperCase()];
            }
        }
        else
            this.per = per;
        console.log(`Set per: ${(_a = this.per) === null || _a === void 0 ? void 0 : _a.name}`);
        return this;
    }
    setType(type) {
        const _temp = type;
        if (typeof type == "string")
            type = Time[type.toUpperCase()];
        if (type === undefined)
            throw new Error('type is undefined for some odd reason??: ' + _temp);
        this.type = type;
        this.win = type.win;
        this.eventTime = type.eventTime;
        console.log(`Set modifier type: ${type.name}`);
        return this;
    }
    setOpp(opp = true) {
        if (opp !== this.opp)
            console.log("Set opp: " + opp);
        this.opp = opp;
        return this;
    }
    canApply(data) {
        if (this.win && !data.player.won)
            return false;
        if (this.opp) {
            switch (this.type) {
                case Type.POWER: return !data.oppCard.power.prot;
                case Type.DAMAGE: return !data.oppCard.damage.prot;
                case Type.ATTACK: return !data.oppCard.attack.prot;
                case Type.LIFE: return !data.oppCard.life.prot;
                case Type.PILLZ: return !data.oppCard.pillz.prot;
            }
        }
        else {
            switch (this.type) {
                case Type.POWER:
                    return !data.card.power.prot || !data.card.power.cancel;
                case Type.DAMAGE:
                    return !data.card.damage.prot || !data.card.damage.cancel;
                case Type.ATTACK:
                    return !data.card.attack.prot || !data.card.attack.cancel;
                case Type.LIFE:
                    return !data.card.life.prot || !data.card.life.cancel;
                case Type.PILLZ:
                    return !data.card.pillz.prot || !data.card.pillz.cancel;
            }
        }
        return true;
    }
    getMultiplier(data) {
        if (this.per !== undefined) {
            let player, card;
            if (this.per.opp) {
                player = data.opp;
                card = data.oppCard;
            }
            else {
                player = data.player;
                card = data.card;
            }
            switch (this.per.type) {
                case 1: return card.power.final;
                case 2: return card.damage.final;
                case 3: return player.life;
                case 4: return player.pillz;
                case 5: return data.round.getClanCards(data.card);
                case 6: return data.round.getClanCards(data.oppCard, true);
                case 7: return data.round.round;
                case 8: return 5 - data.round.round;
                case 9: return data.oppCard.stars;
                case 10: return +(data.card.index == data.oppCard.index);
                case 11: return +(data.card.index != data.oppCard.index);
            }
        }
        return 1;
    }
    mod(base, data) {
        if (base <= this.min || base >= this.max)
            return base;
        const change = this.change * this.getMultiplier(data);
        const final = base + change;
        const squash = Math.min(Math.max(final, this.min), this.max);
        console.log(`${base} => ${final} >=< ${squash}`);
        if (isNaN(squash)) {
            console.log(data.player.life);
            console.log(`${this.getMultiplier(data)} => ${this.change} => ${base}`);
            console.log(`${typeof this.getMultiplier(data)} => ${typeof this
                .change} => ${typeof base}`);
        }
        return squash;
    }
    apply(data) {
        if (this.canApply(data)) {
            console.log(`canApply modifier`);
            let card, player;
            if (this.opp) {
                card = data.oppCard;
                player = data.opp;
            }
            else {
                card = data.card;
                player = data.player;
            }
            switch (this.type) {
                case Type.POWER:
                    card.power_.final = this.mod(card.power.final, data);
                    break;
                case Type.DAMAGE:
                    card.damage_.final = this.mod(card.damage.final, data);
                    break;
                case Type.ATTACK:
                    card.attack_.final = this.mod(card.attack.final, data);
                    break;
                case Type.LIFE:
                    player.life = this.mod(player.life, data);
                    break;
                case Type.PILLZ:
                    player.pillz = this.mod(player.pillz, data);
                    break;
            }
        }
        else
            console.log(`Failed to apply modifier`.yellow);
    }
}
//# sourceMappingURL=data:application/json;base64,